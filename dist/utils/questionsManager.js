import { getFromStorage } from "./storageManager.js";
const DEFAULT_QUESTION_SIZE = 10;
export async function prepareQuestionSet(subjectName) {
    try {
        // step 0: Get all questions of a given subject
        const allQuestions = await loadQuestionsBySubject(subjectName);
        // step 1: Check for desired number of questions
        const numberOfQuestions = getNumberFromStorage('numberOfQuestions', DEFAULT_QUESTION_SIZE);
        // step 2: Shuffle the questions
        const shuffledQuestions = shuffleQuestions(allQuestions);
        // step 3: Create the final question set
        const finalQuestionsSet = new Set();
        for (const question of shuffledQuestions) {
            if (finalQuestionsSet.size < numberOfQuestions) {
                finalQuestionsSet.add(question);
            }
            else {
                break;
            }
        }
        // Convert the Set back to an array 
        const finalQuestionsArray = Array.from(finalQuestionsSet);
        return finalQuestionsArray;
    }
    catch (error) {
        console.error('Error preparing question set:', error);
        throw error;
    }
}
async function loadQuestionsBySubject(subjectName) {
    const res = await fetch(`data/questions/${subjectName.toLowerCase()}.json`);
    const questions = await res.json();
    return questions;
}
function shuffleQuestions(questions) {
    // Shuffle the filtered questions array using Fisher-Yates shuffle algorithm
    for (let i = questions.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [questions[i], questions[j]] = [questions[j], questions[i]];
    }
    return questions;
}
function getNumberFromStorage(key, fallback) {
    const val = getFromStorage(key);
    const parsed = parseInt(val ?? '', 10);
    return isNaN(parsed) ? fallback : parsed;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb25zTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9xdWVzdGlvbnNNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVyRCxNQUFNLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUFDLFdBQW1CO0lBQ3hELElBQUksQ0FBQztRQUNELCtDQUErQztRQUMvQyxNQUFNLFlBQVksR0FBRyxNQUFNLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRS9ELGdEQUFnRDtRQUNoRCxNQUFNLGlCQUFpQixHQUFHLG9CQUFvQixDQUFDLG1CQUFtQixFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFFM0YsZ0NBQWdDO1FBQ2hDLE1BQU0saUJBQWlCLEdBQUcsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFekQsd0NBQXdDO1FBQ3hDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQW9CLENBQUM7UUFDdEQsS0FBSyxNQUFNLFFBQVEsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1lBQ3ZDLElBQUksaUJBQWlCLENBQUMsSUFBSSxHQUFHLGlCQUFpQixFQUFFLENBQUM7Z0JBQzdDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwQyxDQUFDO2lCQUFNLENBQUM7Z0JBQ0osTUFBTTtZQUNWLENBQUM7UUFDTCxDQUFDO1FBQ0Qsb0NBQW9DO1FBQ3BDLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzFELE9BQU8sbUJBQW1CLENBQUM7SUFDL0IsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RELE1BQU0sS0FBSyxDQUFDO0lBQ2hCLENBQUM7QUFDTCxDQUFDO0FBRUQsS0FBSyxVQUFVLHNCQUFzQixDQUFDLFdBQW1CO0lBQ3JELE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLGtCQUFrQixXQUFXLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzVFLE1BQU0sU0FBUyxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25DLE9BQU8sU0FBUyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFDLFNBQTZCO0lBQ25ELDRFQUE0RTtJQUM1RSxLQUFLLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBRUQsU0FBUyxvQkFBb0IsQ0FBQyxHQUFXLEVBQUUsUUFBZ0I7SUFDekQsTUFBTSxHQUFHLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUMzQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVF1ZXN0aW9uVHlwZSB9IGZyb20gXCIuLi90eXBlcy9CYXNlUXVlc3Rpb25UeXBlLmpzXCI7XG5pbXBvcnQgeyBnZXRGcm9tU3RvcmFnZSB9IGZyb20gXCIuL3N0b3JhZ2VNYW5hZ2VyLmpzXCI7XG5cbmNvbnN0IERFRkFVTFRfUVVFU1RJT05fU0laRSA9IDEwO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlcGFyZVF1ZXN0aW9uU2V0KHN1YmplY3ROYW1lOiBzdHJpbmcpOiBQcm9taXNlPEJhc2VRdWVzdGlvblR5cGVbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIHN0ZXAgMDogR2V0IGFsbCBxdWVzdGlvbnMgb2YgYSBnaXZlbiBzdWJqZWN0XG4gICAgICAgIGNvbnN0IGFsbFF1ZXN0aW9ucyA9IGF3YWl0IGxvYWRRdWVzdGlvbnNCeVN1YmplY3Qoc3ViamVjdE5hbWUpO1xuXG4gICAgICAgIC8vIHN0ZXAgMTogQ2hlY2sgZm9yIGRlc2lyZWQgbnVtYmVyIG9mIHF1ZXN0aW9uc1xuICAgICAgICBjb25zdCBudW1iZXJPZlF1ZXN0aW9ucyA9IGdldE51bWJlckZyb21TdG9yYWdlKCdudW1iZXJPZlF1ZXN0aW9ucycsIERFRkFVTFRfUVVFU1RJT05fU0laRSk7XG5cbiAgICAgICAgLy8gc3RlcCAyOiBTaHVmZmxlIHRoZSBxdWVzdGlvbnNcbiAgICAgICAgY29uc3Qgc2h1ZmZsZWRRdWVzdGlvbnMgPSBzaHVmZmxlUXVlc3Rpb25zKGFsbFF1ZXN0aW9ucyk7XG5cbiAgICAgICAgLy8gc3RlcCAzOiBDcmVhdGUgdGhlIGZpbmFsIHF1ZXN0aW9uIHNldFxuICAgICAgICBjb25zdCBmaW5hbFF1ZXN0aW9uc1NldCA9IG5ldyBTZXQ8QmFzZVF1ZXN0aW9uVHlwZT4oKTtcbiAgICAgICAgZm9yIChjb25zdCBxdWVzdGlvbiBvZiBzaHVmZmxlZFF1ZXN0aW9ucykge1xuICAgICAgICAgICAgaWYgKGZpbmFsUXVlc3Rpb25zU2V0LnNpemUgPCBudW1iZXJPZlF1ZXN0aW9ucykge1xuICAgICAgICAgICAgICAgIGZpbmFsUXVlc3Rpb25zU2V0LmFkZChxdWVzdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIENvbnZlcnQgdGhlIFNldCBiYWNrIHRvIGFuIGFycmF5IFxuICAgICAgICBjb25zdCBmaW5hbFF1ZXN0aW9uc0FycmF5ID0gQXJyYXkuZnJvbShmaW5hbFF1ZXN0aW9uc1NldCk7XG4gICAgICAgIHJldHVybiBmaW5hbFF1ZXN0aW9uc0FycmF5O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByZXBhcmluZyBxdWVzdGlvbiBzZXQ6JywgZXJyb3IpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRRdWVzdGlvbnNCeVN1YmplY3Qoc3ViamVjdE5hbWU6IHN0cmluZyk6IFByb21pc2U8QmFzZVF1ZXN0aW9uVHlwZVtdPiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYGRhdGEvcXVlc3Rpb25zLyR7c3ViamVjdE5hbWUudG9Mb3dlckNhc2UoKX0uanNvbmApO1xuICAgIGNvbnN0IHF1ZXN0aW9ucyA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIHF1ZXN0aW9ucztcbn1cblxuZnVuY3Rpb24gc2h1ZmZsZVF1ZXN0aW9ucyhxdWVzdGlvbnM6IEJhc2VRdWVzdGlvblR5cGVbXSk6IEJhc2VRdWVzdGlvblR5cGVbXSB7XG4gICAgLy8gU2h1ZmZsZSB0aGUgZmlsdGVyZWQgcXVlc3Rpb25zIGFycmF5IHVzaW5nIEZpc2hlci1ZYXRlcyBzaHVmZmxlIGFsZ29yaXRobVxuICAgIGZvciAobGV0IGkgPSBxdWVzdGlvbnMubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XG4gICAgICAgIFtxdWVzdGlvbnNbaV0sIHF1ZXN0aW9uc1tqXV0gPSBbcXVlc3Rpb25zW2pdLCBxdWVzdGlvbnNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gcXVlc3Rpb25zO1xufVxuXG5mdW5jdGlvbiBnZXROdW1iZXJGcm9tU3RvcmFnZShrZXk6IHN0cmluZywgZmFsbGJhY2s6IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IHZhbCA9IGdldEZyb21TdG9yYWdlKGtleSk7XG4gIGNvbnN0IHBhcnNlZCA9IHBhcnNlSW50KHZhbCA/PyAnJywgMTApO1xuICByZXR1cm4gaXNOYU4ocGFyc2VkKSA/IGZhbGxiYWNrIDogcGFyc2VkO1xufSJdfQ==