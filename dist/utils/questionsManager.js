import { getFromStorage } from "./storageManager.js";
export async function prepareQuestionSet(subjectName) {
    try {
        // step 0: Get all questions of a given subject
        const allQuestions = await loadQuestionsBySubject(subjectName);
        // step 1: Check for desired number of questions
        const numberOfQuestions = parseInt(getFromStorage('numberOfQuestions') ?? '10', 5); // defaults to 10 if user did not set
        // step 2: Shuffle the questions
        const shuffledQuestions = shuffleQuestions(allQuestions);
        // step 3: Create the final question set
        const finalQuestionsSet = new Set();
        for (const question of shuffledQuestions) {
            if (finalQuestionsSet.size < numberOfQuestions) {
                finalQuestionsSet.add(question);
            }
            else {
                break;
            }
        }
        // Convert the Set back to an array
        const finalQuestionsArray = Array.from(finalQuestionsSet);
        console.table(finalQuestionsArray);
        return finalQuestionsArray;
    }
    catch (error) {
        console.error('Error preparing question set:', error);
        throw error;
    }
}
async function loadQuestionsBySubject(subjectName) {
    console.log(`getting questions from ${subjectName}`);
    const res = await fetch(`/data/questions/${subjectName.toLowerCase()}.json`);
    const questions = await res.json();
    return questions;
}
function shuffleQuestions(questions) {
    // Shuffle the filtered questions array using Fisher-Yates shuffle algorithm
    for (let i = questions.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [questions[i], questions[j]] = [questions[j], questions[i]];
    }
    return questions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb25zTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9xdWVzdGlvbnNNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVyRCxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUFDLFdBQW1CO0lBQ3hELElBQUksQ0FBQztRQUNELCtDQUErQztRQUMvQyxNQUFNLFlBQVksR0FBRyxNQUFNLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRS9ELGdEQUFnRDtRQUNoRCxNQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7UUFFekgsZ0NBQWdDO1FBQ2hDLE1BQU0saUJBQWlCLEdBQUcsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFekQsd0NBQXdDO1FBQ3hDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQW9CLENBQUM7UUFDdEQsS0FBSyxNQUFNLFFBQVEsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1lBQ3ZDLElBQUksaUJBQWlCLENBQUMsSUFBSSxHQUFHLGlCQUFpQixFQUFFLENBQUM7Z0JBQzdDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwQyxDQUFDO2lCQUFNLENBQUM7Z0JBQ0osTUFBTTtZQUNWLENBQUM7UUFDTCxDQUFDO1FBQ0QsbUNBQW1DO1FBQ25DLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzFELE9BQU8sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNuQyxPQUFPLG1CQUFtQixDQUFDO0lBQy9CLENBQUM7SUFBQyxPQUFNLEtBQUssRUFBRSxDQUFDO1FBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0RCxNQUFNLEtBQUssQ0FBQztJQUNoQixDQUFDO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxzQkFBc0IsQ0FBQyxXQUFtQjtJQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLG1CQUFtQixXQUFXLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzdFLE1BQU0sU0FBUyxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25DLE9BQU8sU0FBUyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFDLFNBQTZCO0lBQ25ELDRFQUE0RTtJQUM1RSxLQUFLLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVF1ZXN0aW9uVHlwZSB9IGZyb20gXCIuLi90eXBlcy9CYXNlUXVlc3Rpb25UeXBlLmpzXCI7XG5pbXBvcnQgeyBnZXRGcm9tU3RvcmFnZSB9IGZyb20gXCIuL3N0b3JhZ2VNYW5hZ2VyLmpzXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVwYXJlUXVlc3Rpb25TZXQoc3ViamVjdE5hbWU6IHN0cmluZyk6IFByb21pc2U8QmFzZVF1ZXN0aW9uVHlwZVtdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gc3RlcCAwOiBHZXQgYWxsIHF1ZXN0aW9ucyBvZiBhIGdpdmVuIHN1YmplY3RcbiAgICAgICAgY29uc3QgYWxsUXVlc3Rpb25zID0gYXdhaXQgbG9hZFF1ZXN0aW9uc0J5U3ViamVjdChzdWJqZWN0TmFtZSk7XG5cbiAgICAgICAgLy8gc3RlcCAxOiBDaGVjayBmb3IgZGVzaXJlZCBudW1iZXIgb2YgcXVlc3Rpb25zXG4gICAgICAgIGNvbnN0IG51bWJlck9mUXVlc3Rpb25zID0gcGFyc2VJbnQoZ2V0RnJvbVN0b3JhZ2UoJ251bWJlck9mUXVlc3Rpb25zJykgPz8gJzEwJywgNSk7IC8vIGRlZmF1bHRzIHRvIDEwIGlmIHVzZXIgZGlkIG5vdCBzZXRcblxuICAgICAgICAvLyBzdGVwIDI6IFNodWZmbGUgdGhlIHF1ZXN0aW9uc1xuICAgICAgICBjb25zdCBzaHVmZmxlZFF1ZXN0aW9ucyA9IHNodWZmbGVRdWVzdGlvbnMoYWxsUXVlc3Rpb25zKTtcblxuICAgICAgICAvLyBzdGVwIDM6IENyZWF0ZSB0aGUgZmluYWwgcXVlc3Rpb24gc2V0XG4gICAgICAgIGNvbnN0IGZpbmFsUXVlc3Rpb25zU2V0ID0gbmV3IFNldDxCYXNlUXVlc3Rpb25UeXBlPigpO1xuICAgICAgICBmb3IgKGNvbnN0IHF1ZXN0aW9uIG9mIHNodWZmbGVkUXVlc3Rpb25zKSB7XG4gICAgICAgICAgICBpZiAoZmluYWxRdWVzdGlvbnNTZXQuc2l6ZSA8IG51bWJlck9mUXVlc3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgZmluYWxRdWVzdGlvbnNTZXQuYWRkKHF1ZXN0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29udmVydCB0aGUgU2V0IGJhY2sgdG8gYW4gYXJyYXlcbiAgICAgICAgY29uc3QgZmluYWxRdWVzdGlvbnNBcnJheSA9IEFycmF5LmZyb20oZmluYWxRdWVzdGlvbnNTZXQpO1xuICAgICAgICBjb25zb2xlLnRhYmxlKGZpbmFsUXVlc3Rpb25zQXJyYXkpO1xuICAgICAgICByZXR1cm4gZmluYWxRdWVzdGlvbnNBcnJheTtcbiAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByZXBhcmluZyBxdWVzdGlvbiBzZXQ6JywgZXJyb3IpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRRdWVzdGlvbnNCeVN1YmplY3Qoc3ViamVjdE5hbWU6IHN0cmluZyk6IFByb21pc2U8QmFzZVF1ZXN0aW9uVHlwZVtdPiB7XG4gICAgY29uc29sZS5sb2coYGdldHRpbmcgcXVlc3Rpb25zIGZyb20gJHtzdWJqZWN0TmFtZX1gKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgL2RhdGEvcXVlc3Rpb25zLyR7c3ViamVjdE5hbWUudG9Mb3dlckNhc2UoKX0uanNvbmApO1xuICAgIGNvbnN0IHF1ZXN0aW9ucyA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIHF1ZXN0aW9ucztcbn1cblxuZnVuY3Rpb24gc2h1ZmZsZVF1ZXN0aW9ucyhxdWVzdGlvbnM6IEJhc2VRdWVzdGlvblR5cGVbXSk6IEJhc2VRdWVzdGlvblR5cGVbXSB7XG4gICAgLy8gU2h1ZmZsZSB0aGUgZmlsdGVyZWQgcXVlc3Rpb25zIGFycmF5IHVzaW5nIEZpc2hlci1ZYXRlcyBzaHVmZmxlIGFsZ29yaXRobVxuICAgIGZvciAobGV0IGkgPSBxdWVzdGlvbnMubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XG4gICAgICAgIFtxdWVzdGlvbnNbaV0sIHF1ZXN0aW9uc1tqXV0gPSBbcXVlc3Rpb25zW2pdLCBxdWVzdGlvbnNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gcXVlc3Rpb25zO1xufVxuIl19