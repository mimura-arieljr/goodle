import { getNumberFromStorage } from "./storageManager.js";
const DEFAULT_QUESTION_SIZE = 10;
export async function prepareQuestionSet(subjectName) {
    try {
        // step 0: Get all questions of a given subject
        const allQuestions = await loadQuestionsBySubject(subjectName);
        // step 1: Check for desired number of questions
        const numberOfQuestions = getNumberFromStorage('numberOfQuestions', DEFAULT_QUESTION_SIZE);
        // step 2: Shuffle the questions
        const shuffledQuestions = shuffleQuestions(allQuestions);
        // step 3: Create the final question set
        const finalQuestionsSet = new Set();
        for (const question of shuffledQuestions) {
            if (finalQuestionsSet.size < numberOfQuestions) {
                finalQuestionsSet.add(question);
            }
            else {
                break;
            }
        }
        // Convert the Set back to an array 
        const finalQuestionsArray = Array.from(finalQuestionsSet);
        return finalQuestionsArray;
    }
    catch (error) {
        console.error('Error preparing question set:', error);
        throw error;
    }
}
async function loadQuestionsBySubject(subjectName) {
    const res = await fetch(`data/questions/${subjectName.toLowerCase()}.json`);
    const questions = await res.json();
    return questions;
}
function shuffleQuestions(questions) {
    // Shuffle the filtered questions array using Fisher-Yates shuffle algorithm
    for (let i = questions.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [questions[i], questions[j]] = [questions[j], questions[i]];
    }
    return questions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb25zTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9xdWVzdGlvbnNNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTNELE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBRWpDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsa0JBQWtCLENBQUMsV0FBbUI7SUFDeEQsSUFBSSxDQUFDO1FBQ0QsK0NBQStDO1FBQy9DLE1BQU0sWUFBWSxHQUFHLE1BQU0sc0JBQXNCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFL0QsZ0RBQWdEO1FBQ2hELE1BQU0saUJBQWlCLEdBQUcsb0JBQW9CLENBQUMsbUJBQW1CLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUUzRixnQ0FBZ0M7UUFDaEMsTUFBTSxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUV6RCx3Q0FBd0M7UUFDeEMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLEdBQUcsRUFBb0IsQ0FBQztRQUN0RCxLQUFLLE1BQU0sUUFBUSxJQUFJLGlCQUFpQixFQUFFLENBQUM7WUFDdkMsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQztnQkFDN0MsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BDLENBQUM7aUJBQU0sQ0FBQztnQkFDSixNQUFNO1lBQ1YsQ0FBQztRQUNMLENBQUM7UUFDRCxvQ0FBb0M7UUFDcEMsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDMUQsT0FBTyxtQkFBbUIsQ0FBQztJQUMvQixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsK0JBQStCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEQsTUFBTSxLQUFLLENBQUM7SUFDaEIsQ0FBQztBQUNMLENBQUM7QUFFRCxLQUFLLFVBQVUsc0JBQXNCLENBQUMsV0FBbUI7SUFDckQsTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsa0JBQWtCLFdBQVcsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDNUUsTUFBTSxTQUFTLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbkMsT0FBTyxTQUFTLENBQUM7QUFDckIsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsU0FBNkI7SUFDbkQsNEVBQTRFO0lBQzVFLEtBQUssSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ3JCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlUXVlc3Rpb25UeXBlIH0gZnJvbSBcIi4uL3R5cGVzL0Jhc2VRdWVzdGlvblR5cGUuanNcIjtcbmltcG9ydCB7IGdldE51bWJlckZyb21TdG9yYWdlIH0gZnJvbSBcIi4vc3RvcmFnZU1hbmFnZXIuanNcIjtcblxuY29uc3QgREVGQVVMVF9RVUVTVElPTl9TSVpFID0gMTA7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVwYXJlUXVlc3Rpb25TZXQoc3ViamVjdE5hbWU6IHN0cmluZyk6IFByb21pc2U8QmFzZVF1ZXN0aW9uVHlwZVtdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gc3RlcCAwOiBHZXQgYWxsIHF1ZXN0aW9ucyBvZiBhIGdpdmVuIHN1YmplY3RcbiAgICAgICAgY29uc3QgYWxsUXVlc3Rpb25zID0gYXdhaXQgbG9hZFF1ZXN0aW9uc0J5U3ViamVjdChzdWJqZWN0TmFtZSk7XG5cbiAgICAgICAgLy8gc3RlcCAxOiBDaGVjayBmb3IgZGVzaXJlZCBudW1iZXIgb2YgcXVlc3Rpb25zXG4gICAgICAgIGNvbnN0IG51bWJlck9mUXVlc3Rpb25zID0gZ2V0TnVtYmVyRnJvbVN0b3JhZ2UoJ251bWJlck9mUXVlc3Rpb25zJywgREVGQVVMVF9RVUVTVElPTl9TSVpFKTtcblxuICAgICAgICAvLyBzdGVwIDI6IFNodWZmbGUgdGhlIHF1ZXN0aW9uc1xuICAgICAgICBjb25zdCBzaHVmZmxlZFF1ZXN0aW9ucyA9IHNodWZmbGVRdWVzdGlvbnMoYWxsUXVlc3Rpb25zKTtcblxuICAgICAgICAvLyBzdGVwIDM6IENyZWF0ZSB0aGUgZmluYWwgcXVlc3Rpb24gc2V0XG4gICAgICAgIGNvbnN0IGZpbmFsUXVlc3Rpb25zU2V0ID0gbmV3IFNldDxCYXNlUXVlc3Rpb25UeXBlPigpO1xuICAgICAgICBmb3IgKGNvbnN0IHF1ZXN0aW9uIG9mIHNodWZmbGVkUXVlc3Rpb25zKSB7XG4gICAgICAgICAgICBpZiAoZmluYWxRdWVzdGlvbnNTZXQuc2l6ZSA8IG51bWJlck9mUXVlc3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgZmluYWxRdWVzdGlvbnNTZXQuYWRkKHF1ZXN0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29udmVydCB0aGUgU2V0IGJhY2sgdG8gYW4gYXJyYXkgXG4gICAgICAgIGNvbnN0IGZpbmFsUXVlc3Rpb25zQXJyYXkgPSBBcnJheS5mcm9tKGZpbmFsUXVlc3Rpb25zU2V0KTtcbiAgICAgICAgcmV0dXJuIGZpbmFsUXVlc3Rpb25zQXJyYXk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJlcGFyaW5nIHF1ZXN0aW9uIHNldDonLCBlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZFF1ZXN0aW9uc0J5U3ViamVjdChzdWJqZWN0TmFtZTogc3RyaW5nKTogUHJvbWlzZTxCYXNlUXVlc3Rpb25UeXBlW10+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgZGF0YS9xdWVzdGlvbnMvJHtzdWJqZWN0TmFtZS50b0xvd2VyQ2FzZSgpfS5qc29uYCk7XG4gICAgY29uc3QgcXVlc3Rpb25zID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4gcXVlc3Rpb25zO1xufVxuXG5mdW5jdGlvbiBzaHVmZmxlUXVlc3Rpb25zKHF1ZXN0aW9uczogQmFzZVF1ZXN0aW9uVHlwZVtdKTogQmFzZVF1ZXN0aW9uVHlwZVtdIHtcbiAgICAvLyBTaHVmZmxlIHRoZSBmaWx0ZXJlZCBxdWVzdGlvbnMgYXJyYXkgdXNpbmcgRmlzaGVyLVlhdGVzIHNodWZmbGUgYWxnb3JpdGhtXG4gICAgZm9yIChsZXQgaSA9IHF1ZXN0aW9ucy5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaSArIDEpKTtcbiAgICAgICAgW3F1ZXN0aW9uc1tpXSwgcXVlc3Rpb25zW2pdXSA9IFtxdWVzdGlvbnNbal0sIHF1ZXN0aW9uc1tpXV07XG4gICAgfVxuICAgIHJldHVybiBxdWVzdGlvbnM7XG59XG5cbiJdfQ==