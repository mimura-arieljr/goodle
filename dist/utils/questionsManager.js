import { getNumberFromStorage } from "./storageManager.js";
const DEFAULT_QUESTION_SIZE = 10;
export async function prepareQuestionSet(subjectName) {
    try {
        // step 0: Get all questions of a given subject
        const allQuestions = await loadQuestionsBySubject(subjectName);
        // step 1: Check for desired number of questions
        const numberFromStorage = getNumberFromStorage('numberOfQuestions', DEFAULT_QUESTION_SIZE);
        const numberOfQuestions = numberFromStorage > allQuestions.length ? allQuestions.length : numberFromStorage;
        // step 2: Shuffle the questions
        const shuffledQuestions = shuffleQuestions(allQuestions);
        // step 3: Create the final question set
        const finalQuestionsSet = new Set();
        for (const question of shuffledQuestions) {
            if (finalQuestionsSet.size < numberOfQuestions) {
                finalQuestionsSet.add(question);
            }
            else {
                break;
            }
        }
        // Convert the Set back to an array 
        const finalQuestionsArray = Array.from(finalQuestionsSet);
        return finalQuestionsArray;
    }
    catch (error) {
        console.error('Error preparing question set:', error);
        throw error;
    }
}
async function loadQuestionsBySubject(subjectName) {
    const subjectFile = subjectName.trim().toLowerCase().replace(/\s+/g, '');
    const res = await fetch(`data/questions/${subjectFile}.json`);
    const questions = await res.json();
    return questions;
}
function shuffleQuestions(questions) {
    // Shuffle the filtered questions array using Fisher-Yates shuffle algorithm
    for (let i = questions.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [questions[i], questions[j]] = [questions[j], questions[i]];
    }
    return questions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb25zTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9xdWVzdGlvbnNNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTNELE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBRWpDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsa0JBQWtCLENBQUMsV0FBbUI7SUFDeEQsSUFBSSxDQUFDO1FBQ0QsK0NBQStDO1FBQy9DLE1BQU0sWUFBWSxHQUFHLE1BQU0sc0JBQXNCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFL0QsZ0RBQWdEO1FBQ2hELE1BQU0saUJBQWlCLEdBQUcsb0JBQW9CLENBQUMsbUJBQW1CLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUMzRixNQUFNLGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1FBRTVHLGdDQUFnQztRQUNoQyxNQUFNLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXpELHdDQUF3QztRQUN4QyxNQUFNLGlCQUFpQixHQUFHLElBQUksR0FBRyxFQUFvQixDQUFDO1FBQ3RELEtBQUssTUFBTSxRQUFRLElBQUksaUJBQWlCLEVBQUUsQ0FBQztZQUN2QyxJQUFJLGlCQUFpQixDQUFDLElBQUksR0FBRyxpQkFBaUIsRUFBRSxDQUFDO2dCQUM3QyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDcEMsQ0FBQztpQkFBTSxDQUFDO2dCQUNKLE1BQU07WUFDVixDQUFDO1FBQ0wsQ0FBQztRQUNELG9DQUFvQztRQUNwQyxNQUFNLG1CQUFtQixHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMxRCxPQUFPLG1CQUFtQixDQUFDO0lBQy9CLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0RCxNQUFNLEtBQUssQ0FBQztJQUNoQixDQUFDO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxzQkFBc0IsQ0FBQyxXQUFtQjtJQUNyRCxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RSxNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxrQkFBa0IsV0FBVyxPQUFPLENBQUMsQ0FBQztJQUM5RCxNQUFNLFNBQVMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQyxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxTQUE2QjtJQUNuRCw0RUFBNEU7SUFDNUUsS0FBSyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDNUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VRdWVzdGlvblR5cGUgfSBmcm9tIFwiLi4vdHlwZXMvQmFzZVF1ZXN0aW9uVHlwZS5qc1wiO1xuaW1wb3J0IHsgZ2V0TnVtYmVyRnJvbVN0b3JhZ2UgfSBmcm9tIFwiLi9zdG9yYWdlTWFuYWdlci5qc1wiO1xuXG5jb25zdCBERUZBVUxUX1FVRVNUSU9OX1NJWkUgPSAxMDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZXBhcmVRdWVzdGlvblNldChzdWJqZWN0TmFtZTogc3RyaW5nKTogUHJvbWlzZTxCYXNlUXVlc3Rpb25UeXBlW10+IHtcbiAgICB0cnkge1xuICAgICAgICAvLyBzdGVwIDA6IEdldCBhbGwgcXVlc3Rpb25zIG9mIGEgZ2l2ZW4gc3ViamVjdFxuICAgICAgICBjb25zdCBhbGxRdWVzdGlvbnMgPSBhd2FpdCBsb2FkUXVlc3Rpb25zQnlTdWJqZWN0KHN1YmplY3ROYW1lKTtcblxuICAgICAgICAvLyBzdGVwIDE6IENoZWNrIGZvciBkZXNpcmVkIG51bWJlciBvZiBxdWVzdGlvbnNcbiAgICAgICAgY29uc3QgbnVtYmVyRnJvbVN0b3JhZ2UgPSBnZXROdW1iZXJGcm9tU3RvcmFnZSgnbnVtYmVyT2ZRdWVzdGlvbnMnLCBERUZBVUxUX1FVRVNUSU9OX1NJWkUpO1xuICAgICAgICBjb25zdCBudW1iZXJPZlF1ZXN0aW9ucyA9IG51bWJlckZyb21TdG9yYWdlID4gYWxsUXVlc3Rpb25zLmxlbmd0aCA/IGFsbFF1ZXN0aW9ucy5sZW5ndGggOiBudW1iZXJGcm9tU3RvcmFnZTtcblxuICAgICAgICAvLyBzdGVwIDI6IFNodWZmbGUgdGhlIHF1ZXN0aW9uc1xuICAgICAgICBjb25zdCBzaHVmZmxlZFF1ZXN0aW9ucyA9IHNodWZmbGVRdWVzdGlvbnMoYWxsUXVlc3Rpb25zKTtcblxuICAgICAgICAvLyBzdGVwIDM6IENyZWF0ZSB0aGUgZmluYWwgcXVlc3Rpb24gc2V0XG4gICAgICAgIGNvbnN0IGZpbmFsUXVlc3Rpb25zU2V0ID0gbmV3IFNldDxCYXNlUXVlc3Rpb25UeXBlPigpO1xuICAgICAgICBmb3IgKGNvbnN0IHF1ZXN0aW9uIG9mIHNodWZmbGVkUXVlc3Rpb25zKSB7XG4gICAgICAgICAgICBpZiAoZmluYWxRdWVzdGlvbnNTZXQuc2l6ZSA8IG51bWJlck9mUXVlc3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgZmluYWxRdWVzdGlvbnNTZXQuYWRkKHF1ZXN0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29udmVydCB0aGUgU2V0IGJhY2sgdG8gYW4gYXJyYXkgXG4gICAgICAgIGNvbnN0IGZpbmFsUXVlc3Rpb25zQXJyYXkgPSBBcnJheS5mcm9tKGZpbmFsUXVlc3Rpb25zU2V0KTtcbiAgICAgICAgcmV0dXJuIGZpbmFsUXVlc3Rpb25zQXJyYXk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJlcGFyaW5nIHF1ZXN0aW9uIHNldDonLCBlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZFF1ZXN0aW9uc0J5U3ViamVjdChzdWJqZWN0TmFtZTogc3RyaW5nKTogUHJvbWlzZTxCYXNlUXVlc3Rpb25UeXBlW10+IHtcbiAgICBjb25zdCBzdWJqZWN0RmlsZSA9IHN1YmplY3ROYW1lLnRyaW0oKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGBkYXRhL3F1ZXN0aW9ucy8ke3N1YmplY3RGaWxlfS5qc29uYCk7XG4gICAgY29uc3QgcXVlc3Rpb25zID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4gcXVlc3Rpb25zO1xufVxuXG5mdW5jdGlvbiBzaHVmZmxlUXVlc3Rpb25zKHF1ZXN0aW9uczogQmFzZVF1ZXN0aW9uVHlwZVtdKTogQmFzZVF1ZXN0aW9uVHlwZVtdIHtcbiAgICAvLyBTaHVmZmxlIHRoZSBmaWx0ZXJlZCBxdWVzdGlvbnMgYXJyYXkgdXNpbmcgRmlzaGVyLVlhdGVzIHNodWZmbGUgYWxnb3JpdGhtXG4gICAgZm9yIChsZXQgaSA9IHF1ZXN0aW9ucy5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaSArIDEpKTtcbiAgICAgICAgW3F1ZXN0aW9uc1tpXSwgcXVlc3Rpb25zW2pdXSA9IFtxdWVzdGlvbnNbal0sIHF1ZXN0aW9uc1tpXV07XG4gICAgfVxuICAgIHJldHVybiBxdWVzdGlvbnM7XG59XG5cbiJdfQ==