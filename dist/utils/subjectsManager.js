export async function loadSubjects() {
    const res = await fetch('data/subjects.json');
    const subjects = await res.json();
    const container = document.getElementById('subjects-container');
    container.innerHTML = '';
    subjects.forEach((subject) => {
        const card = document.createElement('div');
        card.className = 'group snap-center shrink-0 w-72 h-80 p-8 px-4 rounded-lg hover:animate-pulsate focus:animate-pulsate';
        card.style.backgroundColor = subject.color;
        card.dataset.subject = subject.name; // set metadata for event binding
        card.innerHTML = `
        <div class="flex justify-end">
          <img src="${subject.icon}" class="h-16 w-16 ${subject.iconColor}" />
        </div>
        <p class="pt-16 text-2xl font-anonymouspro text-custom-dark">${subject.name}</p>
        <p class="pt-4 text-sm font-anonymouspro text-blue-grey-900">${subject.description}</p>
      `;
        container.appendChild(card);
    });
    return subjects;
}
export function bindSubjectCardEvents(callback) {
    const container = document.getElementById("subjects-container");
    const cards = container.querySelectorAll("div[data-subject]");
    cards.forEach((card) => {
        card.addEventListener("click", () => {
            const subjectName = card.getAttribute("data-subject");
            if (subjectName)
                callback(subjectName);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViamVjdHNNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3N1YmplY3RzTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxNQUFNLENBQUMsS0FBSyxVQUFVLFlBQVk7SUFDOUIsTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUM5QyxNQUFNLFFBQVEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFFLENBQUM7SUFDakUsU0FBUyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFFekIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQWdCLEVBQUUsRUFBRTtRQUNsQyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxTQUFTLEdBQUcsc0dBQXNHLENBQUM7UUFDeEgsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsaUNBQWlDO1FBRXRFLElBQUksQ0FBQyxTQUFTLEdBQUc7O3NCQUVILE9BQU8sQ0FBQyxJQUFJLHNCQUFzQixPQUFPLENBQUMsU0FBUzs7dUVBRUYsT0FBTyxDQUFDLElBQUk7dUVBQ1osT0FBTyxDQUFDLFdBQVc7T0FDbkYsQ0FBQztRQUNBLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDO0FBR0QsTUFBTSxVQUFVLHFCQUFxQixDQUFDLFFBQXVDO0lBQ3pFLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUUsQ0FBQztJQUNqRSxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUU5RCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDbkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDaEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN0RCxJQUFJLFdBQVc7Z0JBQUUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSBTdWJqZWN0ID0ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGljb246IHN0cmluZztcbiAgICBjb2xvcjogc3RyaW5nO1xuICAgIGljb25Db2xvcjogc3RyaW5nO1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRTdWJqZWN0cygpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgnZGF0YS9zdWJqZWN0cy5qc29uJyk7XG4gICAgY29uc3Qgc3ViamVjdHMgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdWJqZWN0cy1jb250YWluZXInKSE7XG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuXG4gICAgc3ViamVjdHMuZm9yRWFjaCgoc3ViamVjdDogU3ViamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBjYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNhcmQuY2xhc3NOYW1lID0gJ2dyb3VwIHNuYXAtY2VudGVyIHNocmluay0wIHctNzIgaC04MCBwLTggcHgtNCByb3VuZGVkLWxnIGhvdmVyOmFuaW1hdGUtcHVsc2F0ZSBmb2N1czphbmltYXRlLXB1bHNhdGUnO1xuICAgICAgICBjYXJkLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHN1YmplY3QuY29sb3I7XG4gICAgICAgIGNhcmQuZGF0YXNldC5zdWJqZWN0ID0gc3ViamVjdC5uYW1lOyAvLyBzZXQgbWV0YWRhdGEgZm9yIGV2ZW50IGJpbmRpbmdcblxuICAgICAgICBjYXJkLmlubmVySFRNTCA9IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgganVzdGlmeS1lbmRcIj5cbiAgICAgICAgICA8aW1nIHNyYz1cIiR7c3ViamVjdC5pY29ufVwiIGNsYXNzPVwiaC0xNiB3LTE2ICR7c3ViamVjdC5pY29uQ29sb3J9XCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxwIGNsYXNzPVwicHQtMTYgdGV4dC0yeGwgZm9udC1hbm9ueW1vdXNwcm8gdGV4dC1jdXN0b20tZGFya1wiPiR7c3ViamVjdC5uYW1lfTwvcD5cbiAgICAgICAgPHAgY2xhc3M9XCJwdC00IHRleHQtc20gZm9udC1hbm9ueW1vdXNwcm8gdGV4dC1ibHVlLWdyZXktOTAwXCI+JHtzdWJqZWN0LmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgIGA7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjYXJkKTtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gc3ViamVjdHM7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGJpbmRTdWJqZWN0Q2FyZEV2ZW50cyhjYWxsYmFjazogKHN1YmplY3ROYW1lOiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN1YmplY3RzLWNvbnRhaW5lclwiKSE7XG4gICAgY29uc3QgY2FyZHMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcImRpdltkYXRhLXN1YmplY3RdXCIpO1xuXG4gICAgY2FyZHMuZm9yRWFjaCgoY2FyZCkgPT4ge1xuICAgICAgICBjYXJkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdWJqZWN0TmFtZSA9IGNhcmQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdWJqZWN0XCIpO1xuICAgICAgICAgICAgaWYgKHN1YmplY3ROYW1lKSBjYWxsYmFjayhzdWJqZWN0TmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSJdfQ==