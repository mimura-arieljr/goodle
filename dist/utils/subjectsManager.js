export async function loadSubjects() {
    const res = await fetch('data/subjects.json');
    const subjects = await res.json();
    const container = document.getElementById('subjects-container');
    container.innerHTML = '';
    subjects.forEach((subject) => {
        const card = document.createElement('div');
        card.className = 'group w-56 mx-auto p-8 px-4 rounded-lg hover:animate-pulsate focus:animate-pulsate';
        card.style.backgroundColor = subject.color;
        card.dataset.subject = subject.name; // set metadata for event binding
        card.innerHTML = `
        <div class="flex justify-end">
          <img src="${subject.icon}" class="h-16 w-16 ${subject.iconColor}" />
        </div>
        <p class="pt-16 text-2xl font-anonymouspro text-gray-light">${subject.name}</p>
        <p class="pt-10 text-xl font-anonymouspro text-gray-200">${subject.description}</p>
      `;
        container.appendChild(card);
    });
    return subjects;
}
export function bindSubjectCardEvents(callback) {
    const container = document.getElementById("subjects-container");
    const cards = container.querySelectorAll("div[data-subject]");
    cards.forEach((card) => {
        card.addEventListener("click", () => {
            const subjectName = card.getAttribute("data-subject");
            if (subjectName)
                callback(subjectName);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViamVjdHNNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3N1YmplY3RzTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxNQUFNLENBQUMsS0FBSyxVQUFVLFlBQVk7SUFDOUIsTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUM5QyxNQUFNLFFBQVEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFFLENBQUM7SUFDakUsU0FBUyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFFekIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQWdCLEVBQUUsRUFBRTtRQUNsQyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxTQUFTLEdBQUcsb0ZBQW9GLENBQUM7UUFDdEcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsaUNBQWlDO1FBRXRFLElBQUksQ0FBQyxTQUFTLEdBQUc7O3NCQUVILE9BQU8sQ0FBQyxJQUFJLHNCQUFzQixPQUFPLENBQUMsU0FBUzs7c0VBRUgsT0FBTyxDQUFDLElBQUk7bUVBQ2YsT0FBTyxDQUFDLFdBQVc7T0FDL0UsQ0FBQztRQUNBLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDO0FBR0QsTUFBTSxVQUFVLHFCQUFxQixDQUFDLFFBQXVDO0lBQ3pFLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUUsQ0FBQztJQUNqRSxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUU5RCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDbkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDaEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN0RCxJQUFJLFdBQVc7Z0JBQUUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSBTdWJqZWN0ID0ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGljb246IHN0cmluZztcbiAgICBjb2xvcjogc3RyaW5nO1xuICAgIGljb25Db2xvcjogc3RyaW5nO1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRTdWJqZWN0cygpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgnZGF0YS9zdWJqZWN0cy5qc29uJyk7XG4gICAgY29uc3Qgc3ViamVjdHMgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdWJqZWN0cy1jb250YWluZXInKSE7XG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuXG4gICAgc3ViamVjdHMuZm9yRWFjaCgoc3ViamVjdDogU3ViamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBjYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNhcmQuY2xhc3NOYW1lID0gJ2dyb3VwIHctNTYgbXgtYXV0byBwLTggcHgtNCByb3VuZGVkLWxnIGhvdmVyOmFuaW1hdGUtcHVsc2F0ZSBmb2N1czphbmltYXRlLXB1bHNhdGUnO1xuICAgICAgICBjYXJkLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHN1YmplY3QuY29sb3I7XG4gICAgICAgIGNhcmQuZGF0YXNldC5zdWJqZWN0ID0gc3ViamVjdC5uYW1lOyAvLyBzZXQgbWV0YWRhdGEgZm9yIGV2ZW50IGJpbmRpbmdcblxuICAgICAgICBjYXJkLmlubmVySFRNTCA9IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgganVzdGlmeS1lbmRcIj5cbiAgICAgICAgICA8aW1nIHNyYz1cIiR7c3ViamVjdC5pY29ufVwiIGNsYXNzPVwiaC0xNiB3LTE2ICR7c3ViamVjdC5pY29uQ29sb3J9XCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxwIGNsYXNzPVwicHQtMTYgdGV4dC0yeGwgZm9udC1hbm9ueW1vdXNwcm8gdGV4dC1ncmF5LWxpZ2h0XCI+JHtzdWJqZWN0Lm5hbWV9PC9wPlxuICAgICAgICA8cCBjbGFzcz1cInB0LTEwIHRleHQteGwgZm9udC1hbm9ueW1vdXNwcm8gdGV4dC1ncmF5LTIwMFwiPiR7c3ViamVjdC5kZXNjcmlwdGlvbn08L3A+XG4gICAgICBgO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2FyZCk7XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHN1YmplY3RzO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBiaW5kU3ViamVjdENhcmRFdmVudHMoY2FsbGJhY2s6IChzdWJqZWN0TmFtZTogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdWJqZWN0cy1jb250YWluZXJcIikhO1xuICAgIGNvbnN0IGNhcmRzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJkaXZbZGF0YS1zdWJqZWN0XVwiKTtcblxuICAgIGNhcmRzLmZvckVhY2goKGNhcmQpID0+IHtcbiAgICAgICAgY2FyZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3ViamVjdE5hbWUgPSBjYXJkLmdldEF0dHJpYnV0ZShcImRhdGEtc3ViamVjdFwiKTtcbiAgICAgICAgICAgIGlmIChzdWJqZWN0TmFtZSkgY2FsbGJhY2soc3ViamVjdE5hbWUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0iXX0=