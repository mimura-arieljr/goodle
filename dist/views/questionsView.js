import { prepareQuestionSet } from "../utils/questionsManager.js";
import { isAnswerValid } from "../utils/answersManager.js";
import { startCountdownTimer } from "../utils/timerManager.js";
const answerInput = document.getElementById("answer-input");
const correctAnswer = document.getElementById("correct-answer-text");
export async function questionsView(subjectsPage, questionsPage, subject) {
    const backBtn = document.getElementById("questions-back-btn");
    const submitBtn = document.getElementById("answer-submit-btn");
    let currentQuestionIndex = 0;
    backBtn.addEventListener("click", () => {
        subjectsPage.classList.remove("hidden");
        questionsPage.classList.add("hidden");
    });
    // Prepare and show the questions
    const questions = await prepareQuestionSet(subject);
    showQuestion(currentQuestionIndex, questions);
    startCountdownTimer();
    // Handle answer submit
    submitBtn.addEventListener("click", () => {
        const userAnswer = answerInput.value;
        const isValid = isAnswerValid(userAnswer, questions[currentQuestionIndex]);
        showAnswerFeedback(isValid);
        if (!isValid) {
            correctAnswer.classList.remove("hidden");
            correctAnswer.innerText = questions[currentQuestionIndex].Answer;
        }
        submitBtn.disabled = true;
        setTimeout(() => {
            answerInput.classList.remove("border-red", "border-green");
            correctAnswer.classList.add("hidden");
            submitBtn.disabled = false;
            moveToNextQuestion();
        }, 2000);
    });
    function moveToNextQuestion() {
        currentQuestionIndex++;
        if (currentQuestionIndex < questions.length) {
            showQuestion(currentQuestionIndex, questions);
            startCountdownTimer();
        }
        else {
            console.log("All questions completed!");
            // e.g., show results or redirect
        }
    }
}
function showQuestion(index, questions) {
    const questionTextEl = document.getElementById("question-text");
    const choicesContainer = document.getElementById("choices-container");
    const q = questions[index];
    questionTextEl.innerText = q.Question;
    answerInput.value = "";
    choicesContainer.innerHTML = "";
    // TODO: Handle multiple choice
}
function showAnswerFeedback(isCorrect) {
    if (isCorrect) {
        answerInput.classList.add("border-green");
    }
    else {
        answerInput.classList.add("border-red");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb25zVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92aWV3cy9xdWVzdGlvbnNWaWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUvRCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBcUIsQ0FBQztBQUNoRixNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFnQixDQUFDO0FBRXBGLE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUFDLFlBQXlCLEVBQUUsYUFBMEIsRUFBRSxPQUFlO0lBQ3RHLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQXNCLENBQUM7SUFDbkYsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBc0IsQ0FBQztJQUNwRixJQUFJLG9CQUFvQixHQUFHLENBQUMsQ0FBQztJQUU3QixPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtRQUNuQyxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztJQUVILGlDQUFpQztJQUNqQyxNQUFNLFNBQVMsR0FBRyxNQUFNLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BELFlBQVksQ0FBQyxvQkFBb0IsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM5QyxtQkFBbUIsRUFBRSxDQUFDO0lBRXRCLHVCQUF1QjtJQUN2QixTQUFTLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtRQUNyQyxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQztRQUUzRSxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU1QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDWCxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6QyxhQUFhLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNyRSxDQUFDO1FBRUQsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFMUIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNaLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQztZQUMzRCxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN0QyxTQUFTLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUUzQixrQkFBa0IsRUFBRSxDQUFDO1FBQ3pCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxrQkFBa0I7UUFDdkIsb0JBQW9CLEVBQUUsQ0FBQztRQUN2QixJQUFJLG9CQUFvQixHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUMxQyxZQUFZLENBQUMsb0JBQW9CLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDOUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMxQixDQUFDO2FBQU0sQ0FBQztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUN4QyxpQ0FBaUM7UUFDckMsQ0FBQztJQUNMLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsS0FBYSxFQUFFLFNBQTZCO0lBQzlELE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFnQixDQUFDO0lBQy9FLE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBZ0IsQ0FBQztJQUVyRixNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsY0FBYyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQ3RDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLGdCQUFnQixDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFFaEMsK0JBQStCO0FBQ25DLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLFNBQWtCO0lBQzFDLElBQUksU0FBUyxFQUFFLENBQUM7UUFDWixXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM5QyxDQUFDO1NBQU0sQ0FBQztRQUNKLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVF1ZXN0aW9uVHlwZSB9IGZyb20gXCIuLi90eXBlcy9CYXNlUXVlc3Rpb25UeXBlLmpzXCI7XG5pbXBvcnQgeyBwcmVwYXJlUXVlc3Rpb25TZXQgfSBmcm9tIFwiLi4vdXRpbHMvcXVlc3Rpb25zTWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgaXNBbnN3ZXJWYWxpZCB9IGZyb20gXCIuLi91dGlscy9hbnN3ZXJzTWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgc3RhcnRDb3VudGRvd25UaW1lciB9IGZyb20gXCIuLi91dGlscy90aW1lck1hbmFnZXIuanNcIjtcblxuY29uc3QgYW5zd2VySW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFuc3dlci1pbnB1dFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuY29uc3QgY29ycmVjdEFuc3dlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29ycmVjdC1hbnN3ZXItdGV4dFwiKSBhcyBIVE1MRWxlbWVudDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHF1ZXN0aW9uc1ZpZXcoc3ViamVjdHNQYWdlOiBIVE1MRWxlbWVudCwgcXVlc3Rpb25zUGFnZTogSFRNTEVsZW1lbnQsIHN1YmplY3Q6IHN0cmluZykge1xuICAgIGNvbnN0IGJhY2tCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1ZXN0aW9ucy1iYWNrLWJ0blwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBjb25zdCBzdWJtaXRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFuc3dlci1zdWJtaXQtYnRuXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIGxldCBjdXJyZW50UXVlc3Rpb25JbmRleCA9IDA7XG5cbiAgICBiYWNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIHN1YmplY3RzUGFnZS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICAgICAgICBxdWVzdGlvbnNQYWdlLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gICAgfSk7XG5cbiAgICAvLyBQcmVwYXJlIGFuZCBzaG93IHRoZSBxdWVzdGlvbnNcbiAgICBjb25zdCBxdWVzdGlvbnMgPSBhd2FpdCBwcmVwYXJlUXVlc3Rpb25TZXQoc3ViamVjdCk7XG4gICAgc2hvd1F1ZXN0aW9uKGN1cnJlbnRRdWVzdGlvbkluZGV4LCBxdWVzdGlvbnMpO1xuICAgIHN0YXJ0Q291bnRkb3duVGltZXIoKTtcblxuICAgIC8vIEhhbmRsZSBhbnN3ZXIgc3VibWl0XG4gICAgc3VibWl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJBbnN3ZXIgPSBhbnN3ZXJJbnB1dC52YWx1ZTtcbiAgICAgICAgY29uc3QgaXNWYWxpZCA9IGlzQW5zd2VyVmFsaWQodXNlckFuc3dlciwgcXVlc3Rpb25zW2N1cnJlbnRRdWVzdGlvbkluZGV4XSk7XG5cbiAgICAgICAgc2hvd0Fuc3dlckZlZWRiYWNrKGlzVmFsaWQpO1xuXG4gICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgICAgY29ycmVjdEFuc3dlci5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgY29ycmVjdEFuc3dlci5pbm5lclRleHQgPSBxdWVzdGlvbnNbY3VycmVudFF1ZXN0aW9uSW5kZXhdLkFuc3dlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1Ym1pdEJ0bi5kaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBhbnN3ZXJJbnB1dC5jbGFzc0xpc3QucmVtb3ZlKFwiYm9yZGVyLXJlZFwiLCBcImJvcmRlci1ncmVlblwiKTtcbiAgICAgICAgICAgIGNvcnJlY3RBbnN3ZXIuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICAgICAgICAgIHN1Ym1pdEJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBtb3ZlVG9OZXh0UXVlc3Rpb24oKTtcbiAgICAgICAgfSwgMjAwMCk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBtb3ZlVG9OZXh0UXVlc3Rpb24oKSB7XG4gICAgICAgIGN1cnJlbnRRdWVzdGlvbkluZGV4Kys7XG4gICAgICAgIGlmIChjdXJyZW50UXVlc3Rpb25JbmRleCA8IHF1ZXN0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNob3dRdWVzdGlvbihjdXJyZW50UXVlc3Rpb25JbmRleCwgcXVlc3Rpb25zKTtcbiAgICAgICAgICAgIHN0YXJ0Q291bnRkb3duVGltZXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWxsIHF1ZXN0aW9ucyBjb21wbGV0ZWQhXCIpO1xuICAgICAgICAgICAgLy8gZS5nLiwgc2hvdyByZXN1bHRzIG9yIHJlZGlyZWN0XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNob3dRdWVzdGlvbihpbmRleDogbnVtYmVyLCBxdWVzdGlvbnM6IEJhc2VRdWVzdGlvblR5cGVbXSkge1xuICAgIGNvbnN0IHF1ZXN0aW9uVGV4dEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJxdWVzdGlvbi10ZXh0XCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGNob2ljZXNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNob2ljZXMtY29udGFpbmVyXCIpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3QgcSA9IHF1ZXN0aW9uc1tpbmRleF07XG4gICAgcXVlc3Rpb25UZXh0RWwuaW5uZXJUZXh0ID0gcS5RdWVzdGlvbjtcbiAgICBhbnN3ZXJJbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgY2hvaWNlc0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuXG4gICAgLy8gVE9ETzogSGFuZGxlIG11bHRpcGxlIGNob2ljZVxufVxuXG5mdW5jdGlvbiBzaG93QW5zd2VyRmVlZGJhY2soaXNDb3JyZWN0OiBib29sZWFuKSB7XG4gICAgaWYgKGlzQ29ycmVjdCkge1xuICAgICAgICBhbnN3ZXJJbnB1dC5jbGFzc0xpc3QuYWRkKFwiYm9yZGVyLWdyZWVuXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFuc3dlcklucHV0LmNsYXNzTGlzdC5hZGQoXCJib3JkZXItcmVkXCIpO1xuICAgIH1cbn0iXX0=