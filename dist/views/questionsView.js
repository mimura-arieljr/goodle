import { prepareQuestionSet } from "../utils/questionsManager.js";
import { isAnswerValid } from "../utils/answersManager.js";
import { startCountdownTimer } from "../utils/timerManager.js";
import { resultsView } from "./resultsView.js";
const answerInput = document.getElementById("answer-input");
const correctAnswer = document.getElementById("correct-answer-text");
const CORRECT_BORDER_COLOR = "border-green";
const INCORRECT_BORDER_COLOR = "border-red";
export async function questionsView(subjectsPage, questionsPage, subject) {
    const backBtn = document.getElementById("questions-back-btn");
    const submitBtn = document.getElementById("answer-submit-btn");
    let score = 0;
    let currentQuestionIndex = 0;
    // Event listeners
    backBtn.addEventListener("click", () => {
        subjectsPage.classList.remove("hidden");
        questionsPage.classList.add("hidden");
    });
    // Use onclick instead of eventListener
    // Avoid listener getting stacked multiple times on the same button. 
    // This causes handleAnswerSubmission() to be called more than once â€” even with outdated state. 
    submitBtn.onclick = handleAnswerSubmission;
    // Prepare and show the questions
    const questions = await prepareQuestionSet(subject);
    showQuestion(currentQuestionIndex, questions);
    // Handle answer submit
    function handleAnswerSubmission() {
        const userAnswer = answerInput.value;
        const isValid = isAnswerValid(userAnswer, questions[currentQuestionIndex]);
        handleAnswerFeedback(isValid);
        if (!isValid) {
            correctAnswer.classList.remove("invisible");
            correctAnswer.innerText = `Correct Answer: ${questions[currentQuestionIndex].Answer}`;
        }
        submitBtn.disabled = true;
        setTimeout(() => {
            answerInput.classList.remove(INCORRECT_BORDER_COLOR, CORRECT_BORDER_COLOR);
            correctAnswer.classList.add("invisible");
            submitBtn.disabled = false;
            moveToNextQuestion();
        }, 2000);
    }
    function moveToNextQuestion() {
        currentQuestionIndex++;
        if (currentQuestionIndex < questions.length) {
            showQuestion(currentQuestionIndex, questions);
        }
        else {
            console.log("All questions completed!");
            resultsView(subjectsPage, questionsPage, score);
        }
    }
    function showQuestion(index, questions) {
        const questionTextEl = document.getElementById("question-text");
        const choicesContainer = document.getElementById("choices-container");
        const q = questions[index];
        questionTextEl.innerText = q.Question;
        answerInput.value = "";
        choicesContainer.innerHTML = "";
        // TODO: Handle multiple choice
        // Start countdown timer on each question
        startCountdownTimer(handleAnswerSubmission);
    }
    function handleAnswerFeedback(isCorrect) {
        if (isCorrect) {
            answerInput.classList.add(CORRECT_BORDER_COLOR);
            score++;
        }
        else {
            answerInput.classList.add(INCORRECT_BORDER_COLOR);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,