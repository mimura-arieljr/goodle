import { prepareQuestionSet } from "../utils/questionsManager.js";
import { isAnswerValid } from "../utils/answersManager.js";
const answerInput = document.getElementById("answer-input");
const correctAnswer = document.getElementById("correct-answer-text");
export async function questionsView(subjectsPage, questionsPage, subject) {
    const backBtn = document.getElementById("questions-back-btn");
    const submitBtn = document.getElementById("answer-submit-btn");
    let currentQuestionIndex = 0;
    backBtn.addEventListener("click", () => {
        subjectsPage.classList.remove("hidden");
        questionsPage.classList.add("hidden");
    });
    // Prepare and show the questions
    const questions = await prepareQuestionSet(subject);
    showQuestion(currentQuestionIndex, questions);
    // Handle answer submit
    submitBtn.addEventListener("click", () => {
        const userAnswer = answerInput.value;
        const isValid = isAnswerValid(userAnswer, questions[currentQuestionIndex]);
        showAnswerFeedback(isValid);
        if (!isValid) {
            correctAnswer.classList.remove("hidden");
            correctAnswer.innerText = questions[currentQuestionIndex].Answer;
        }
        submitBtn.disabled = true;
        setTimeout(() => {
            answerInput.classList.remove("border-red", "border-green");
            correctAnswer.classList.add("hidden");
            submitBtn.disabled = false;
            moveToNextQuestion();
        }, 2000);
    });
    function moveToNextQuestion() {
        currentQuestionIndex++;
        if (currentQuestionIndex < questions.length) {
            showQuestion(currentQuestionIndex, questions);
        }
        else {
            console.log("All questions completed!");
            // e.g., show results or redirect
        }
    }
}
function showQuestion(index, questions) {
    const questionTextEl = document.getElementById("question-text");
    const choicesContainer = document.getElementById("choices-container");
    const q = questions[index];
    questionTextEl.innerText = q.Question;
    answerInput.value = "";
    choicesContainer.innerHTML = "";
    // TODO: Handle multiple choice
}
function showAnswerFeedback(isCorrect) {
    if (isCorrect) {
        answerInput.classList.add("border-green");
    }
    else {
        answerInput.classList.add("border-red");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb25zVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92aWV3cy9xdWVzdGlvbnNWaWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUzRCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBcUIsQ0FBQztBQUNoRixNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFnQixDQUFDO0FBRXBGLE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUFDLFlBQXlCLEVBQUUsYUFBMEIsRUFBRSxPQUFlO0lBQ3RHLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQXNCLENBQUM7SUFDbkYsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBc0IsQ0FBQztJQUNwRixJQUFJLG9CQUFvQixHQUFHLENBQUMsQ0FBQztJQUU3QixPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtRQUNuQyxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztJQUVILGlDQUFpQztJQUNqQyxNQUFNLFNBQVMsR0FBRyxNQUFNLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BELFlBQVksQ0FBQyxvQkFBb0IsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUU5Qyx1QkFBdUI7SUFDdkIsU0FBUyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7UUFDckMsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUNyQyxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7UUFFM0Usa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFNUIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ1gsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDekMsYUFBYSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDckUsQ0FBQztRQUVELFNBQVMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBRTFCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDWixXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFDM0QsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDdEMsU0FBUyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFFM0Isa0JBQWtCLEVBQUUsQ0FBQztRQUN6QixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsa0JBQWtCO1FBQ3ZCLG9CQUFvQixFQUFFLENBQUM7UUFDdkIsSUFBSSxvQkFBb0IsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDMUMsWUFBWSxDQUFDLG9CQUFvQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2xELENBQUM7YUFBTSxDQUFDO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQ3hDLGlDQUFpQztRQUNyQyxDQUFDO0lBQ0wsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxLQUFhLEVBQUUsU0FBNkI7SUFDOUQsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQWdCLENBQUM7SUFDL0UsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFnQixDQUFDO0lBRXJGLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixjQUFjLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDdEMsV0FBVyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDdkIsZ0JBQWdCLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUVoQywrQkFBK0I7QUFDbkMsQ0FBQztBQUVELFNBQVMsa0JBQWtCLENBQUMsU0FBa0I7SUFDMUMsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUNaLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7U0FBTSxDQUFDO1FBQ0osV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDNUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlUXVlc3Rpb25UeXBlIH0gZnJvbSBcIi4uL3R5cGVzL0Jhc2VRdWVzdGlvblR5cGUuanNcIjtcbmltcG9ydCB7IHByZXBhcmVRdWVzdGlvblNldCB9IGZyb20gXCIuLi91dGlscy9xdWVzdGlvbnNNYW5hZ2VyLmpzXCI7XG5pbXBvcnQgeyBpc0Fuc3dlclZhbGlkIH0gZnJvbSBcIi4uL3V0aWxzL2Fuc3dlcnNNYW5hZ2VyLmpzXCI7XG5cbmNvbnN0IGFuc3dlcklucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbnN3ZXItaW5wdXRcIikgYXMgSFRNTElucHV0RWxlbWVudDtcbmNvbnN0IGNvcnJlY3RBbnN3ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvcnJlY3QtYW5zd2VyLXRleHRcIikgYXMgSFRNTEVsZW1lbnQ7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBxdWVzdGlvbnNWaWV3KHN1YmplY3RzUGFnZTogSFRNTEVsZW1lbnQsIHF1ZXN0aW9uc1BhZ2U6IEhUTUxFbGVtZW50LCBzdWJqZWN0OiBzdHJpbmcpIHtcbiAgICBjb25zdCBiYWNrQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJxdWVzdGlvbnMtYmFjay1idG5cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgY29uc3Qgc3VibWl0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbnN3ZXItc3VibWl0LWJ0blwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBsZXQgY3VycmVudFF1ZXN0aW9uSW5kZXggPSAwO1xuXG4gICAgYmFja0J0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBzdWJqZWN0c1BhZ2UuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgICAgICAgcXVlc3Rpb25zUGFnZS5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgIH0pO1xuXG4gICAgLy8gUHJlcGFyZSBhbmQgc2hvdyB0aGUgcXVlc3Rpb25zXG4gICAgY29uc3QgcXVlc3Rpb25zID0gYXdhaXQgcHJlcGFyZVF1ZXN0aW9uU2V0KHN1YmplY3QpO1xuICAgIHNob3dRdWVzdGlvbihjdXJyZW50UXVlc3Rpb25JbmRleCwgcXVlc3Rpb25zKTtcblxuICAgIC8vIEhhbmRsZSBhbnN3ZXIgc3VibWl0XG4gICAgc3VibWl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJBbnN3ZXIgPSBhbnN3ZXJJbnB1dC52YWx1ZTtcbiAgICAgICAgY29uc3QgaXNWYWxpZCA9IGlzQW5zd2VyVmFsaWQodXNlckFuc3dlciwgcXVlc3Rpb25zW2N1cnJlbnRRdWVzdGlvbkluZGV4XSk7XG5cbiAgICAgICAgc2hvd0Fuc3dlckZlZWRiYWNrKGlzVmFsaWQpO1xuXG4gICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgICAgY29ycmVjdEFuc3dlci5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgY29ycmVjdEFuc3dlci5pbm5lclRleHQgPSBxdWVzdGlvbnNbY3VycmVudFF1ZXN0aW9uSW5kZXhdLkFuc3dlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1Ym1pdEJ0bi5kaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBhbnN3ZXJJbnB1dC5jbGFzc0xpc3QucmVtb3ZlKFwiYm9yZGVyLXJlZFwiLCBcImJvcmRlci1ncmVlblwiKTtcbiAgICAgICAgICAgIGNvcnJlY3RBbnN3ZXIuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICAgICAgICAgIHN1Ym1pdEJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBtb3ZlVG9OZXh0UXVlc3Rpb24oKTtcbiAgICAgICAgfSwgMjAwMCk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBtb3ZlVG9OZXh0UXVlc3Rpb24oKSB7XG4gICAgICAgIGN1cnJlbnRRdWVzdGlvbkluZGV4Kys7XG4gICAgICAgIGlmIChjdXJyZW50UXVlc3Rpb25JbmRleCA8IHF1ZXN0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNob3dRdWVzdGlvbihjdXJyZW50UXVlc3Rpb25JbmRleCwgcXVlc3Rpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWxsIHF1ZXN0aW9ucyBjb21wbGV0ZWQhXCIpO1xuICAgICAgICAgICAgLy8gZS5nLiwgc2hvdyByZXN1bHRzIG9yIHJlZGlyZWN0XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNob3dRdWVzdGlvbihpbmRleDogbnVtYmVyLCBxdWVzdGlvbnM6IEJhc2VRdWVzdGlvblR5cGVbXSkge1xuICAgIGNvbnN0IHF1ZXN0aW9uVGV4dEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJxdWVzdGlvbi10ZXh0XCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGNob2ljZXNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNob2ljZXMtY29udGFpbmVyXCIpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3QgcSA9IHF1ZXN0aW9uc1tpbmRleF07XG4gICAgcXVlc3Rpb25UZXh0RWwuaW5uZXJUZXh0ID0gcS5RdWVzdGlvbjtcbiAgICBhbnN3ZXJJbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgY2hvaWNlc0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuXG4gICAgLy8gVE9ETzogSGFuZGxlIG11bHRpcGxlIGNob2ljZVxufVxuXG5mdW5jdGlvbiBzaG93QW5zd2VyRmVlZGJhY2soaXNDb3JyZWN0OiBib29sZWFuKSB7XG4gICAgaWYgKGlzQ29ycmVjdCkge1xuICAgICAgICBhbnN3ZXJJbnB1dC5jbGFzc0xpc3QuYWRkKFwiYm9yZGVyLWdyZWVuXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFuc3dlcklucHV0LmNsYXNzTGlzdC5hZGQoXCJib3JkZXItcmVkXCIpO1xuICAgIH1cbn0iXX0=