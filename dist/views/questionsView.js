import { prepareQuestionSet } from "../utils/questionsManager.js";
import { isAnswerValid } from "../utils/answersManager.js";
import { startCountdownTimer } from "../utils/timerManager.js";
const answerInput = document.getElementById("answer-input");
const correctAnswer = document.getElementById("correct-answer-text");
export async function questionsView(subjectsPage, questionsPage, subject) {
    const backBtn = document.getElementById("questions-back-btn");
    const submitBtn = document.getElementById("answer-submit-btn");
    let currentQuestionIndex = 0;
    // Event listeners
    backBtn.addEventListener("click", () => {
        subjectsPage.classList.remove("hidden");
        questionsPage.classList.add("hidden");
    });
    submitBtn.addEventListener("click", handleAnswerSubmission);
    // Prepare and show the questions
    const questions = await prepareQuestionSet(subject);
    showQuestion(currentQuestionIndex, questions);
    // Handle answer submit
    function handleAnswerSubmission() {
        const userAnswer = answerInput.value;
        const isValid = isAnswerValid(userAnswer, questions[currentQuestionIndex]);
        showAnswerFeedback(isValid);
        if (!isValid) {
            correctAnswer.classList.remove("invisible");
            correctAnswer.innerText = `Correct Answer: ${questions[currentQuestionIndex].Answer}`;
        }
        submitBtn.disabled = true;
        setTimeout(() => {
            answerInput.classList.remove("border-red", "border-green");
            correctAnswer.classList.add("invisible");
            submitBtn.disabled = false;
            moveToNextQuestion();
        }, 2000);
    }
    function moveToNextQuestion() {
        currentQuestionIndex++;
        if (currentQuestionIndex < questions.length) {
            showQuestion(currentQuestionIndex, questions);
        }
        else {
            console.log("All questions completed!");
            // e.g., show results or redirect
        }
    }
    function showQuestion(index, questions) {
        const questionTextEl = document.getElementById("question-text");
        const choicesContainer = document.getElementById("choices-container");
        const q = questions[index];
        questionTextEl.innerText = q.Question;
        answerInput.value = "";
        choicesContainer.innerHTML = "";
        // TODO: Handle multiple choice
        // Start countdown timer on each question
        startCountdownTimer(handleAnswerSubmission);
    }
    function showAnswerFeedback(isCorrect) {
        if (isCorrect) {
            answerInput.classList.add("border-green");
        }
        else {
            answerInput.classList.add("border-red");
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb25zVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92aWV3cy9xdWVzdGlvbnNWaWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUvRCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBcUIsQ0FBQztBQUNoRixNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFnQixDQUFDO0FBRXBGLE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUFDLFlBQXlCLEVBQUUsYUFBMEIsRUFBRSxPQUFlO0lBQ3RHLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQXNCLENBQUM7SUFDbkYsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBc0IsQ0FBQztJQUNwRixJQUFJLG9CQUFvQixHQUFHLENBQUMsQ0FBQztJQUU3QixrQkFBa0I7SUFDbEIsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7UUFDbkMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFFNUQsaUNBQWlDO0lBQ2pDLE1BQU0sU0FBUyxHQUFHLE1BQU0sa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEQsWUFBWSxDQUFDLG9CQUFvQixFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRTlDLHVCQUF1QjtJQUN2QixTQUFTLHNCQUFzQjtRQUMzQixNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQztRQUUzRSxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU1QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDWCxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM1QyxhQUFhLENBQUMsU0FBUyxHQUFHLG1CQUFtQixTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMxRixDQUFDO1FBRUQsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFMUIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNaLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQztZQUMzRCxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN6QyxTQUFTLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUUzQixrQkFBa0IsRUFBRSxDQUFDO1FBQ3pCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNiLENBQUM7SUFFRCxTQUFTLGtCQUFrQjtRQUN2QixvQkFBb0IsRUFBRSxDQUFDO1FBQ3ZCLElBQUksb0JBQW9CLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzFDLFlBQVksQ0FBQyxvQkFBb0IsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNsRCxDQUFDO2FBQU0sQ0FBQztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUN4QyxpQ0FBaUM7UUFDckMsQ0FBQztJQUNMLENBQUM7SUFFRCxTQUFTLFlBQVksQ0FBQyxLQUFhLEVBQUUsU0FBNkI7UUFDOUQsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQWdCLENBQUM7UUFDL0UsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFnQixDQUFDO1FBRXJGLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixjQUFjLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDdEMsV0FBVyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDdkIsZ0JBQWdCLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUVoQywrQkFBK0I7UUFFL0IseUNBQXlDO1FBQ3pDLG1CQUFtQixDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELFNBQVMsa0JBQWtCLENBQUMsU0FBa0I7UUFDMUMsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUNaLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzlDLENBQUM7YUFBTSxDQUFDO1lBQ0osV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUMsQ0FBQztJQUNMLENBQUM7QUFFTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVF1ZXN0aW9uVHlwZSB9IGZyb20gXCIuLi90eXBlcy9CYXNlUXVlc3Rpb25UeXBlLmpzXCI7XG5pbXBvcnQgeyBwcmVwYXJlUXVlc3Rpb25TZXQgfSBmcm9tIFwiLi4vdXRpbHMvcXVlc3Rpb25zTWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgaXNBbnN3ZXJWYWxpZCB9IGZyb20gXCIuLi91dGlscy9hbnN3ZXJzTWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgc3RhcnRDb3VudGRvd25UaW1lciB9IGZyb20gXCIuLi91dGlscy90aW1lck1hbmFnZXIuanNcIjtcblxuY29uc3QgYW5zd2VySW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFuc3dlci1pbnB1dFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuY29uc3QgY29ycmVjdEFuc3dlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29ycmVjdC1hbnN3ZXItdGV4dFwiKSBhcyBIVE1MRWxlbWVudDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHF1ZXN0aW9uc1ZpZXcoc3ViamVjdHNQYWdlOiBIVE1MRWxlbWVudCwgcXVlc3Rpb25zUGFnZTogSFRNTEVsZW1lbnQsIHN1YmplY3Q6IHN0cmluZykge1xuICAgIGNvbnN0IGJhY2tCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1ZXN0aW9ucy1iYWNrLWJ0blwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBjb25zdCBzdWJtaXRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFuc3dlci1zdWJtaXQtYnRuXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIGxldCBjdXJyZW50UXVlc3Rpb25JbmRleCA9IDA7XG5cbiAgICAvLyBFdmVudCBsaXN0ZW5lcnNcbiAgICBiYWNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIHN1YmplY3RzUGFnZS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICAgICAgICBxdWVzdGlvbnNQYWdlLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gICAgfSk7XG5cbiAgICBzdWJtaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUFuc3dlclN1Ym1pc3Npb24pO1xuXG4gICAgLy8gUHJlcGFyZSBhbmQgc2hvdyB0aGUgcXVlc3Rpb25zXG4gICAgY29uc3QgcXVlc3Rpb25zID0gYXdhaXQgcHJlcGFyZVF1ZXN0aW9uU2V0KHN1YmplY3QpO1xuICAgIHNob3dRdWVzdGlvbihjdXJyZW50UXVlc3Rpb25JbmRleCwgcXVlc3Rpb25zKTtcblxuICAgIC8vIEhhbmRsZSBhbnN3ZXIgc3VibWl0XG4gICAgZnVuY3Rpb24gaGFuZGxlQW5zd2VyU3VibWlzc2lvbigpIHtcbiAgICAgICAgY29uc3QgdXNlckFuc3dlciA9IGFuc3dlcklucHV0LnZhbHVlO1xuICAgICAgICBjb25zdCBpc1ZhbGlkID0gaXNBbnN3ZXJWYWxpZCh1c2VyQW5zd2VyLCBxdWVzdGlvbnNbY3VycmVudFF1ZXN0aW9uSW5kZXhdKTtcblxuICAgICAgICBzaG93QW5zd2VyRmVlZGJhY2soaXNWYWxpZCk7XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICBjb3JyZWN0QW5zd2VyLmNsYXNzTGlzdC5yZW1vdmUoXCJpbnZpc2libGVcIik7XG4gICAgICAgICAgICBjb3JyZWN0QW5zd2VyLmlubmVyVGV4dCA9IGBDb3JyZWN0IEFuc3dlcjogJHtxdWVzdGlvbnNbY3VycmVudFF1ZXN0aW9uSW5kZXhdLkFuc3dlcn1gO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VibWl0QnRuLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGFuc3dlcklucHV0LmNsYXNzTGlzdC5yZW1vdmUoXCJib3JkZXItcmVkXCIsIFwiYm9yZGVyLWdyZWVuXCIpO1xuICAgICAgICAgICAgY29ycmVjdEFuc3dlci5jbGFzc0xpc3QuYWRkKFwiaW52aXNpYmxlXCIpO1xuICAgICAgICAgICAgc3VibWl0QnRuLmRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIG1vdmVUb05leHRRdWVzdGlvbigpO1xuICAgICAgICB9LCAyMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlVG9OZXh0UXVlc3Rpb24oKSB7XG4gICAgICAgIGN1cnJlbnRRdWVzdGlvbkluZGV4Kys7XG4gICAgICAgIGlmIChjdXJyZW50UXVlc3Rpb25JbmRleCA8IHF1ZXN0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNob3dRdWVzdGlvbihjdXJyZW50UXVlc3Rpb25JbmRleCwgcXVlc3Rpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWxsIHF1ZXN0aW9ucyBjb21wbGV0ZWQhXCIpO1xuICAgICAgICAgICAgLy8gZS5nLiwgc2hvdyByZXN1bHRzIG9yIHJlZGlyZWN0XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaG93UXVlc3Rpb24oaW5kZXg6IG51bWJlciwgcXVlc3Rpb25zOiBCYXNlUXVlc3Rpb25UeXBlW10pIHtcbiAgICAgICAgY29uc3QgcXVlc3Rpb25UZXh0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1ZXN0aW9uLXRleHRcIikgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGNob2ljZXNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNob2ljZXMtY29udGFpbmVyXCIpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgICAgIGNvbnN0IHEgPSBxdWVzdGlvbnNbaW5kZXhdO1xuICAgICAgICBxdWVzdGlvblRleHRFbC5pbm5lclRleHQgPSBxLlF1ZXN0aW9uO1xuICAgICAgICBhbnN3ZXJJbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgIGNob2ljZXNDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcblxuICAgICAgICAvLyBUT0RPOiBIYW5kbGUgbXVsdGlwbGUgY2hvaWNlXG5cbiAgICAgICAgLy8gU3RhcnQgY291bnRkb3duIHRpbWVyIG9uIGVhY2ggcXVlc3Rpb25cbiAgICAgICAgc3RhcnRDb3VudGRvd25UaW1lcihoYW5kbGVBbnN3ZXJTdWJtaXNzaW9uKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaG93QW5zd2VyRmVlZGJhY2soaXNDb3JyZWN0OiBib29sZWFuKSB7XG4gICAgICAgIGlmIChpc0NvcnJlY3QpIHtcbiAgICAgICAgICAgIGFuc3dlcklucHV0LmNsYXNzTGlzdC5hZGQoXCJib3JkZXItZ3JlZW5cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbnN3ZXJJbnB1dC5jbGFzc0xpc3QuYWRkKFwiYm9yZGVyLXJlZFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxufSJdfQ==